<%version 1%>
<%description 
    <b>Data: </b>Item fields<br>
    <b>Notes: </b>This report displays a listing of items in column format.<br/>
	This recipe has been modified from the "Basic - HTML, Column" recipe to<br/> utilize new sample CSS shipped with the ALM 2009 Solution.<br>
%>
<%param 
    name="reporttitle" 
    type="String" 
    prompt="Report Title" 
    value="" 
    description="Descriptive title for your report."
%>
<%param
    name="reportheader" 
    type="MultiString" 
    prompt="Report Header" 
    value="" 
    description="Text appearing at the top of the report page."
%>
<%param
    name="reportfooter" 
    type="MultiString" 
    prompt="Report Footer" 
    value="" 
    description="Text appearing at the bottom of the report page."
%>


<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>&reporttitle</title>
	<style>
	.one{
		font-family:"微软雅黑";
		}
	</style>
    <%screenStyleSheet%>
    <%printerStyleSheet%>
	
    <script  language="javascript">
		var line_count=0;
		var REPORT_ISSUES = "";
		function writeEvenOddTRTag() {
			line_count++; 
			if (line_count%2 == 0)
				document.write("<tr class='even_row'>");
			else
				document.write("<tr class='odd_row'>"); 
		}
		var projectInt=0;
		function printnoi(){
			for(var i=0;i<1;i++){	
				projectInt++;
				if (projectInt%2 == 0){
					document.write("<tr class='even_row'>");
				}else{
					document.write("<tr class='odd_row'>");
				}		
			}
		}

		function printText(field){
			var contentList = field.split("`"); 
			console.log(contentList);
			var category = contentList[0];
			var goal = contentList[1];
			var metric = contentList[2];
			var attribute = contentList[3];
			var formula = contentList[4];
			var legends = contentList[5];
			var targetValue = contentList[6];
			var actualValue = contentList[7];
			var unit = contentList[8];
			
			var signFirst = "&lt;;&gt;";
			var signNext = "&lt;:&gt;";
			var signContentOne = "&lt;and&gt;";
			var signContentTwo = ":";
			
			var categoryLists 	=  new Array();
			var goalLists 		=  new Array();
			var metricLists 	=  new Array();
			var attributeLists 	=  new Array();
			var formulaLists 	=  new Array();
			var legendsLists 	=  new Array();
			var targetValueLists =  new Array();
			var actualValueLists =  new Array();
			var unitLists 	=  new Array();
			
			if(	null!=category && "" != category){
				categoryLists 	= (""+category).split(signFirst);
			}
			
			if(	null!=goal && "" != goal){
				goalLists 	= (""+goal).split(signFirst);
			}
			if(	null!=metric && "" != metric){
				metricLists 	= (""+metric).split(signFirst);
			}
			if(	null!=attribute && "" != attribute){
				attributeLists 	= (""+attribute).split(signFirst);
			}
			if(	null!=formula && "" != formula){
				formulaLists 	= (""+formula).split(signFirst);
			}
			if(	null!=legends && "" != legends){
				legendsLists 	= (""+legends).split(signFirst);
			}
			if(	null!=targetValue && "" != targetValue){
				targetValueLists = (""+targetValue).split(signFirst);
			}
			if(	null!=actualValue && "" != actualValue){
				actualValueLists 	= (""+actualValue).split(signFirst);
			}
			if(	null!=unit && "" != unit){
				unitLists 	= (""+unit).split(signFirst);
			}
			
			var categorMap = new Map();
			var goalMap = new Map();
			var metricMap = new Map();
			var attributeMap = new Map();
			var formulaMap = new Map();
			var legendsMap = new Map();
			var targetValueMap = new Map();
			var actualValueMap = new Map();
			var unitMap = new Map();
			var snoSet = new Set();
			
			// 首先循环取到所有的编号
			for(var categoryIndex=0 ; categoryIndex<categoryLists.length ; categoryIndex++){
				if(null != categoryLists[categoryIndex] && "" != categoryLists[categoryIndex]){
					var ncategoryList = categoryLists[categoryIndex].split(signNext);
					var categoryKey = ncategoryList[0]
					var categoryVal = ncategoryList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,ncategoryList[0].length);
						snoSet.add(categoryKey.trim());
						categorMap.set(categoryKey.trim(),categoryVal);
					}else{
						snoSet.add(categoryKey.trim());
						categorMap.set((categoryKey+"").trim(),categoryVal);
					}
				}
			}
			
			for(var goalIndex=0 ; goalIndex<goalLists.length ; goalIndex++){
				if(null != goalLists[goalIndex] && "" != goalLists[goalIndex]){
					var ngoalList = goalLists[goalIndex].split(signNext);
					var goalKey = ngoalList[0]
					var goalVal = ngoalList[1]
					var mksIndex = goalKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						goalKey = goalKey.substring(mksIndex+1,goalKey.length);
						goalMap.set(goalKey.trim(),goalVal);
					}else{
						goalMap.set(goalKey.trim(),goalVal);
					}
				}
			}
			
			for(var metricIndex=0 ; metricIndex<metricLists.length ; metricIndex++){
				if(null != metricLists[metricIndex] && "" != metricLists[metricIndex]){
					var nmetricList = metricLists[metricIndex].split(signNext);
					var categoryKey = nmetricList[0]
					var categoryVal = nmetricList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						metricMap.set(categoryKey.trim(),categoryVal);
					}else{
						metricMap.set(categoryKey.trim(),categoryVal);
					}
				}
			}
			for(var attributeIndex=0 ; attributeIndex<attributeLists.length ; attributeIndex++){
				if(null != attributeLists[attributeIndex] && "" != attributeLists[attributeIndex]){
					var nattributeList = attributeLists[attributeIndex].split(signNext);
					var categoryKey = nattributeList[0]
					var categoryVal = nattributeList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						attributeMap.set(categoryKey.trim(),categoryVal);
					}else{
						attributeMap.set(categoryKey.trim(),categoryVal);
					}
				}
			}
			for(var formulaIndex=0 ; formulaIndex<formulaLists.length ; formulaIndex++){
				if(null != formulaLists[formulaIndex] && "" != formulaLists[formulaIndex]){
					var nformulaList = formulaLists[formulaIndex].split(signNext);
					var categoryKey = nformulaList[0]
					var categoryVal = nformulaList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						formulaMap.set(categoryKey.trim(),categoryVal);
					}else{
						formulaMap.set(categoryKey.trim(),categoryVal);
					}
				}
			}
			for(var legendsIndex=0 ; legendsIndex<legendsLists.length ; legendsIndex++){
				if(null != legendsLists[legendsIndex] && "" != legendsLists[legendsIndex]){
					var nlegendsList = legendsLists[legendsIndex].split(signNext);
					var categoryKey = nlegendsList[0]
					var categoryVal = nlegendsList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						legendsMap.set(categoryKey.trim(),categoryVal);
					}else{
						legendsMap.set(categoryKey.trim(),categoryVal);
					}
				}	
			}
			for(var targetValueIndex=0 ; targetValueIndex<targetValueLists.length ; targetValueIndex++){
				if(null != targetValueLists[targetValueIndex] && "" != targetValueLists[targetValueIndex]){
					var ntargetValueList = targetValueLists[targetValueIndex].split(signNext);
					var categoryKey = ntargetValueList[0]
					var categoryVal = ntargetValueList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					console.log("mksIndex : " + mksIndex);
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						
						targetValueMap.set(categoryKey.trim(),categoryVal);
					}else{
						
						targetValueMap.set(categoryKey.trim(),categoryVal);
					}
					
					
				}	
			}
			
			var nAindex = 0;
			var nAArray = new Array();
			
			var bigKeyMap = new Map();
			var bigValMap = new Map();
			
			for(var actualValueIndex=0 ; actualValueIndex<actualValueLists.length ; actualValueIndex++){
				if(null != actualValueLists[actualValueIndex] && "" != actualValueLists[actualValueIndex]){
					var nactualValueList = actualValueLists[actualValueIndex].split(signNext);
					var categoryKey = nactualValueList[0]
					var categoryVal = nactualValueList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						
						actualValueMap.set(categoryKey.trim(),categoryVal);
					}else{
						
						actualValueMap.set(categoryKey.trim(),categoryVal);
					}
					
					if((categoryVal+"").indexOf(",") > 0){
						nAArray[nAindex] = categoryKey;
						nAindex++;
						var bigArray = categoryVal.split(",");
						
						var nBigIndex = 0;
						var nkeyAry = new Array();
						var nValAry = new Array();
						for(var bigIndex=0 ; bigIndex<bigArray.length ; bigIndex++){
							var linesList = bigArray[bigIndex].split(":");
							nkeyAry[nBigIndex] = linesList[0];
							nValAry[nBigIndex] = linesList[1];
							nBigIndex++;
						}
						bigKeyMap.set(categoryKey.trim(),nkeyAry);
						bigValMap.set(categoryKey.trim(),nValAry);
					}
				}
			}
			for(var unitIndex=0 ; unitIndex<unitLists.length ; unitIndex++){
				if(null != unitLists[unitIndex] && "" != unitLists[unitIndex]){
					var nunitList = unitLists[unitIndex].split(signNext);
					
					var categoryKey = nunitList[0]
					var categoryVal = nunitList[1]
					var mksIndex = categoryKey.indexOf(">") ; 
					if(mksIndex > 0){
						categoryKey = categoryKey.substring(mksIndex+1,categoryKey.length);
						
						unitMap.set(categoryKey.trim(),categoryVal);
					}else{
						
						unitMap.set(categoryKey.trim(),categoryVal);
					}
				}
			}
			
			for(x of actualValueMap){
				console.log( x[0] + "=" + x[1]);
			}
			for (var x of snoSet) { // 遍历Set
				console.log( "snoSet : "+x.trim());
				console.log( "The "+x+" Value : "+actualValueMap.get(x.trim()));
			}
			
			for (var x of snoSet) { // 遍历Set
				
				
				if(nAArray.indexOf(x)<0){
					printnoi();
					document.write("<td class='border'>"+x+"</td>");  // SNO
					
					document.write("<td class='border'>"+categorMap.get(x)+"</td>"); // category
					document.write("<td class='border'>"+goalMap.get(x)+"</td>");
					document.write("<td class='border'>"+metricMap.get(x)+"</td>");
					document.write("<td class='border'>"+attributeMap.get(x)+"</td>");
					document.write("<td class='border'>"+formulaMap.get(x)+"</td>");
					document.write("<td class='border' style='width:40%;'>"+legendsMap.get(x)+"</td>");
					document.write("<td class='border'>"+targetValueMap.get(x)+"</td>");
					document.write("<td class='border' width='200px'>"+actualValueMap.get(x)+"</td>");
					document.write("<td class='border'>"+unitMap.get(x)+"</td>");
				}else{
					var currentKeyArray = bigKeyMap.get(x);
					var currentValArray = bigValMap.get(x);
					
					console.log("currentKeyArray" + currentKeyArray);
					console.log("currentValArray" + currentValArray);
					
					for(var k=0 ; k<currentKeyArray.length ; k++){
						printnoi();
						document.write("<td class='border'>"+x+"</td>");  // SNO
						document.write("<td class='border'>"+categorMap.get(x)+"</td>"); // category
						document.write("<td class='border'>"+goalMap.get(x)+"</td>");
						document.write("<td class='border'>"+metricMap.get(x)+"</td>");
						document.write("<td class='border'>"+attributeMap.get(x)+"</td>");
						document.write("<td class='border'>"+formulaMap.get(x)+"</td>");
						document.write("<td class='border' style='width:40%;'>"+currentKeyArray[k]+"</td>");
						document.write("<td class='border'>"+targetValueMap.get(x)+"</td>");
						document.write("<td class='border' width='200px'>"+currentValArray[k]+"</td>");
						document.write("<td class='border'>"+unitMap.get(x)+"</td>");
						
						
					}
				}
				
				
				
			}
			
			
			
			
			
			
		 
			
		}
		function paramField(field){
		 document.write("<td class='border'>"+field+"</td>");
		}
		
	</script> 
	
</head>
<%dateformat%>
<%datetimeformat%>
<%sortby &sortby%>
<body>
<table class="heading">
<tr>
	<td><%logoURL%></td>
	<td class="title_white" align="right" width="100%">&reporttitle</td>
	<td>&nbsp;</td>
</tr>
</table>
<table class="white_bg">
    <tr><td></td></tr>
</table>
<table width="100%" class="heading">
    <tr><td></td></tr>
</tr>
</table>
<p class="header">&reportheader</p>
<p class="date"><%currentdate%></p>

<table border="0" cellspacing="0" cellpadding="0">
<tr>
	<td align="left"><a id="RERUNLINK"><img src="<%hosturl%>MKS_ALM_2009/refresh.gif" border="0"></a></td>
</tr>
</table>

<!-- Display issue field values -->
<%begindetail%>
	<table class="detailcols fullWidth">
	<script type="text/javascript">
	document.write("<p class='title'><%<%builtin Type%>%> <a class='title' href='<%hosturl%>im/WebClient?IssueID=<%<%builtin ID%>%>' target='_blank'><%<%builtin ID%>%></a>: <%Project%></p>");
	
	document.write("<tr>");
	
	document.write("<td align='center' rowspan='1'  bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>SNO.</td>");
	
	document.write("<td align='center' rowspan='1'	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Category</td>");
	document.write("<td align='center' rowspan='1'	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Goal</td>");
	document.write("<td align='center' rowspan='1'	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Metric</td>");
	document.write("<td align='center' rowspan='1'	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Attribute</td>");
	document.write("<td align='center' rowspan='1' 	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Formula</td>");
	document.write("<td align='center' rowspan='1' 	bgcolor='#A6CAF0'><font color='#FFFFFF' size='2px'>Legends</td>");
	document.write("<td align='center' rowspan='1' 	bgcolor='#A6CAF0' width='200px'><font color='#FFFFFF' size='2px'>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspTarget&nbspValue&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</td>");
	document.write("<td align='center' rowspan='1' 	bgcolor='#5499EF' ><font color='#FFFFFF' size='2px'>Actual Value</td>");
	document.write("<td align='center' rowspan='1' 	bgcolor='#A6CAF0' ><font color='#FFFFFF' size='2px'>Unit</td>");
	document.write("</tr>");
	</script>
	
	<script type="text/javascript">
		writeEvenOddTRTag();
		if(REPORT_ISSUES == "") REPORT_ISSUES = <%<%builtin ID%>%>;
		else REPORT_ISSUES = REPORT_ISSUES+","+<%<%builtin ID%>%>;
	</script>
	<%iteratefields%>
	
	 <%/iteratefields%>
	
	<script type="text/javascript">
		printnoi();
	</script>
	
	<script type="text/javascript">
		var str  = "<%KPI Category%>" + "`" + "<%KPI Goal%>" + "`" +"<%KPI Metric%>" + "`" + "<%KPI Attribute%>" + "`" + "<%KPI Formula%>" + "`" + "<%KPI Legends%>" + "`" + "<%KPI Target Value%>" + "`" + "<%KPI Actual Value%>" + "`" + "<%KPI Unit%>" ;
		printText(str);  
	
	</script>
<%enddetail%>
</table>
<center class="footer">&reportfooter</center>

<script type="text/javascript">
	if (REPORT_ISSUES == "") document.all.RERUNLINK.href = "<%hosturl%>im/runreport?selection=&currentReportName";
	else document.all.RERUNLINK.href = "<%hosturl%>im/runreport?selection=&currentReportName&issues=" + REPORT_ISSUES;
</script>
</body>
</html>
